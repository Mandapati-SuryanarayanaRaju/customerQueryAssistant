{"ast":null,"code":"// GENERATED FILE. DO NOT EDIT.\n(function (global, factory) {\n  function unwrapDefault(exports) {\n    return \"default\" in exports ? exports.default : exports;\n  }\n  if (typeof define === \"function\" && define.amd) {\n    define([], function () {\n      var exports = {};\n      factory(exports);\n      return unwrapDefault(exports);\n    });\n  } else if (typeof exports === \"object\") {\n    factory(exports);\n    if (typeof module === \"object\") module.exports = unwrapDefault(exports);\n  } else {\n    (function () {\n      var exports = {};\n      factory(exports);\n      global.Long = unwrapDefault(exports);\n    })();\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    // \\0asm\n    0, 97, 115, 109,\n    // version 1\n    1, 0, 0, 0,\n    // section \"type\"\n    1, 13, 2,\n    // 0, () => i32\n    96, 0, 1, 127,\n    // 1, (i32, i32, i32, i32) => i32\n    96, 4, 127, 127, 127, 127, 1, 127,\n    // section \"function\"\n    3, 7, 6,\n    // 0, type 0\n    0,\n    // 1, type 1\n    1,\n    // 2, type 1\n    1,\n    // 3, type 1\n    1,\n    // 4, type 1\n    1,\n    // 5, type 1\n    1,\n    // section \"global\"\n    6, 6, 1,\n    // 0, \"high\", mutable i32\n    127, 1, 65, 0, 11,\n    // section \"export\"\n    7, 50, 6,\n    // 0, \"mul\"\n    3, 109, 117, 108, 0, 1,\n    // 1, \"div_s\"\n    5, 100, 105, 118, 95, 115, 0, 2,\n    // 2, \"div_u\"\n    5, 100, 105, 118, 95, 117, 0, 3,\n    // 3, \"rem_s\"\n    5, 114, 101, 109, 95, 115, 0, 4,\n    // 4, \"rem_u\"\n    5, 114, 101, 109, 95, 117, 0, 5,\n    // 5, \"get_high\"\n    8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n    // section \"code\"\n    10, 191, 1, 6,\n    // 0, \"get_high\"\n    4, 0, 35, 0, 11,\n    // 1, \"mul\"\n    36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n    // 2, \"div_s\"\n    36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n    // 3, \"div_u\"\n    36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n    // 4, \"rem_s\"\n    36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n    // 5, \"rem_u\"\n    36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch {\n    // no wasm support :(\n  }\n\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n  }\n\n  // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  Long.isLong = isLong;\n\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  var INT_CACHE = {};\n\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  var UINT_CACHE = {};\n\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromInt = fromInt;\n\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromNumber = fromNumber;\n\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromBits = fromBits;\n\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error(\"empty string\");\n    if (typeof unsigned === \"number\") {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n    var p;\n    if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    }\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromString = fromString;\n\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  function fromValue(val, unsigned) {\n    if (typeof val === \"number\") return fromNumber(val, unsigned);\n    if (typeof val === \"string\") return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n  }\n\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  Long.fromValue = fromValue;\n\n  // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_16_DBL = 1 << 16;\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_24_DBL = 1 << 24;\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var ZERO = fromInt(0);\n\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  Long.ZERO = ZERO;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var UZERO = fromInt(0, true);\n\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  Long.UZERO = UZERO;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var ONE = fromInt(1);\n\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  Long.ONE = ONE;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var UONE = fromInt(1, true);\n\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  Long.UONE = UONE;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var NEG_ONE = fromInt(-1);\n\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  Long.NEG_ONE = NEG_ONE;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  Long.MAX_VALUE = MAX_VALUE;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  Long.MIN_VALUE = MIN_VALUE;\n\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  var LongPrototype = Long.prototype;\n\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n    if (this.isZero()) return \"0\";\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return \"-\" + this.neg().toString(radix);\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n      rem = this;\n    var result = \"\";\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = \"0\" + digits;\n        result = \"\" + digits + result;\n      }\n    }\n  };\n\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative())\n      // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n\n  /**\n   * Tests if this Long can be safely represented as a JavaScript number.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isSafeInteger = function isSafeInteger() {\n    // 2^53-1 is the maximum safe value\n    var top11Bits = this.high >> 21;\n    // [0, 2^53-1]\n    if (!top11Bits) return true;\n    // > 2^53-1\n    if (this.unsigned) return false;\n    // [-2^53, -1] except -2^53\n    return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n  };\n\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  LongPrototype.eqz = LongPrototype.isZero;\n\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.eq = LongPrototype.equals;\n\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(/* validates */other);\n  };\n\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.neq = LongPrototype.notEquals;\n\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.ne = LongPrototype.notEquals;\n\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(/* validates */other) < 0;\n  };\n\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.lt = LongPrototype.lessThan;\n\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(/* validates */other) <= 0;\n  };\n\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(/* validates */other) > 0;\n  };\n\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.gt = LongPrototype.greaterThan;\n\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(/* validates */other) >= 0;\n  };\n\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {boolean}\n   */\n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    // At this point the sign bits are the same\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|bigint|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  LongPrototype.comp = LongPrototype.compare;\n\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  LongPrototype.neg = LongPrototype.negate;\n\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend);\n\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xffff;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xffff;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|bigint|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  LongPrototype.sub = LongPrototype.subtract;\n\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n    // use wasm support if present\n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n    // If both longs are small, use float multiplication\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xffff;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xffff;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|bigint|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  LongPrototype.mul = LongPrototype.multiply;\n\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error(\"division by zero\");\n\n    // use wasm support if present\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    }\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx),\n        approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  };\n\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|bigint|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  LongPrototype.div = LongPrototype.divide;\n\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n\n    // use wasm support if present\n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|bigint|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  LongPrototype.mod = LongPrototype.modulo;\n\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|bigint|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  LongPrototype.rem = LongPrototype.modulo;\n\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other Long\n   * @returns {!Long}\n   */\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other Long\n   * @returns {!Long}\n   */\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|bigint|string} other Other Long\n   * @returns {!Long}\n   */\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shl = LongPrototype.shiftLeft;\n\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shr = LongPrototype.shiftRight;\n\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  LongPrototype.rotl = LongPrototype.rotateLeft;\n\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  LongPrototype.rotr = LongPrototype.rotateRight;\n\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n      lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n\n  // Support conversion to/from BigInt where available\n  if (typeof BigInt === \"function\") {\n    /**\n     * Returns a Long representing the given big integer.\n     * @function\n     * @param {number} value The big integer value\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromBigInt = function fromBigInt(value, unsigned) {\n      var lowBits = Number(BigInt.asIntN(32, value));\n      var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n      return fromBits(lowBits, highBits, unsigned);\n    };\n\n    // Override\n    Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n      if (typeof value === \"bigint\") return fromBigInt(value, unsigned);\n      return fromValue(value, unsigned);\n    };\n\n    /**\n     * Converts the Long to its big integer representation.\n     * @this {!Long}\n     * @returns {bigint}\n     */\n    LongPrototype.toBigInt = function toBigInt() {\n      var lowBigInt = BigInt(this.low >>> 0);\n      var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n      return highBigInt << BigInt(32) | lowBigInt;\n    };\n  }\n  var _default = _exports.default = Long;\n});","map":{"version":3,"names":["global","factory","unwrapDefault","exports","default","define","amd","module","Long","globalThis","self","_exports","Object","defineProperty","value","wasm","WebAssembly","Instance","Module","Uint8Array","low","high","unsigned","prototype","__isLong__","isLong","obj","ctz32","c","Math","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isSafeInteger","top11Bits","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","BigInt","fromBigInt","Number","asIntN","fromValueWithBigInt","toBigInt","lowBigInt","highBigInt","_default"],"sources":["D:/Customer Query Assistant/Customer Query Assistant/client/node_modules/long/umd/index.js"],"sourcesContent":["// GENERATED FILE. DO NOT EDIT.\n(function (global, factory) {\n  function unwrapDefault(exports) {\n    return \"default\" in exports ? exports.default : exports;\n  }\n  if (typeof define === \"function\" && define.amd) {\n    define([], function () {\n      var exports = {};\n      factory(exports);\n      return unwrapDefault(exports);\n    });\n  } else if (typeof exports === \"object\") {\n    factory(exports);\n    if (typeof module === \"object\") module.exports = unwrapDefault(exports);\n  } else {\n    (function () {\n      var exports = {};\n      factory(exports);\n      global.Long = unwrapDefault(exports);\n    })();\n  }\n})(\n  typeof globalThis !== \"undefined\"\n    ? globalThis\n    : typeof self !== \"undefined\"\n      ? self\n      : this,\n  function (_exports) {\n    \"use strict\";\n\n    Object.defineProperty(_exports, \"__esModule\", {\n      value: true,\n    });\n    _exports.default = void 0;\n    /**\n     * @license\n     * Copyright 2009 The Closure Library Authors\n     * Copyright 2020 Daniel Wirtz / The long.js Authors.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *     http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     *\n     * SPDX-License-Identifier: Apache-2.0\n     */\n\n    // WebAssembly optimizations to do native i64 multiplication and divide\n    var wasm = null;\n    try {\n      wasm = new WebAssembly.Instance(\n        new WebAssembly.Module(\n          new Uint8Array([\n            // \\0asm\n            0, 97, 115, 109,\n            // version 1\n            1, 0, 0, 0,\n            // section \"type\"\n            1, 13, 2,\n            // 0, () => i32\n            96, 0, 1, 127,\n            // 1, (i32, i32, i32, i32) => i32\n            96, 4, 127, 127, 127, 127, 1, 127,\n            // section \"function\"\n            3, 7, 6,\n            // 0, type 0\n            0,\n            // 1, type 1\n            1,\n            // 2, type 1\n            1,\n            // 3, type 1\n            1,\n            // 4, type 1\n            1,\n            // 5, type 1\n            1,\n            // section \"global\"\n            6, 6, 1,\n            // 0, \"high\", mutable i32\n            127, 1, 65, 0, 11,\n            // section \"export\"\n            7, 50, 6,\n            // 0, \"mul\"\n            3, 109, 117, 108, 0, 1,\n            // 1, \"div_s\"\n            5, 100, 105, 118, 95, 115, 0, 2,\n            // 2, \"div_u\"\n            5, 100, 105, 118, 95, 117, 0, 3,\n            // 3, \"rem_s\"\n            5, 114, 101, 109, 95, 115, 0, 4,\n            // 4, \"rem_u\"\n            5, 114, 101, 109, 95, 117, 0, 5,\n            // 5, \"get_high\"\n            8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n            // section \"code\"\n            10, 191, 1, 6,\n            // 0, \"get_high\"\n            4, 0, 35, 0, 11,\n            // 1, \"mul\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 2, \"div_s\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 3, \"div_u\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 4, \"rem_s\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 5, \"rem_u\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n          ]),\n        ),\n        {},\n      ).exports;\n    } catch {\n      // no wasm support :(\n    }\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n      /**\n       * The low 32 bits as a signed value.\n       * @type {number}\n       */\n      this.low = low | 0;\n\n      /**\n       * The high 32 bits as a signed value.\n       * @type {number}\n       */\n      this.high = high | 0;\n\n      /**\n       * Whether unsigned or not.\n       * @type {boolean}\n       */\n      this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @private\n     */\n    Long.prototype.__isLong__;\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n      value: true,\n    });\n\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */\n    function isLong(obj) {\n      return (obj && obj[\"__isLong__\"]) === true;\n    }\n\n    /**\n     * @function\n     * @param {*} value number\n     * @returns {number}\n     * @inner\n     */\n    function ctz32(value) {\n      var c = Math.clz32(value & -value);\n      return value ? 31 - c : c;\n    }\n\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     */\n    Long.isLong = isLong;\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromInt(value, unsigned) {\n      var obj, cachedObj, cache;\n      if (unsigned) {\n        value >>>= 0;\n        if ((cache = 0 <= value && value < 256)) {\n          cachedObj = UINT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, 0, true);\n        if (cache) UINT_CACHE[value] = obj;\n        return obj;\n      } else {\n        value |= 0;\n        if ((cache = -128 <= value && value < 128)) {\n          cachedObj = INT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache) INT_CACHE[value] = obj;\n        return obj;\n      }\n    }\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromInt = fromInt;\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromNumber(value, unsigned) {\n      if (isNaN(value)) return unsigned ? UZERO : ZERO;\n      if (unsigned) {\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n      } else {\n        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n      }\n      if (value < 0) return fromNumber(-value, unsigned).neg();\n      return fromBits(\n        value % TWO_PWR_32_DBL | 0,\n        (value / TWO_PWR_32_DBL) | 0,\n        unsigned,\n      );\n    }\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromNumber = fromNumber;\n\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromBits(lowBits, highBits, unsigned) {\n      return new Long(lowBits, highBits, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromBits = fromBits;\n\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */\n    function fromString(str, unsigned, radix) {\n      if (str.length === 0) throw Error(\"empty string\");\n      if (typeof unsigned === \"number\") {\n        // For goog.math.long compatibility\n        radix = unsigned;\n        unsigned = false;\n      } else {\n        unsigned = !!unsigned;\n      }\n      if (\n        str === \"NaN\" ||\n        str === \"Infinity\" ||\n        str === \"+Infinity\" ||\n        str === \"-Infinity\"\n      )\n        return unsigned ? UZERO : ZERO;\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      var p;\n      if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n      else if (p === 0) {\n        return fromString(str.substring(1), unsigned, radix).neg();\n      }\n\n      // Do several (8) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 8));\n      var result = ZERO;\n      for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n          var power = fromNumber(pow_dbl(radix, size));\n          result = result.mul(power).add(fromNumber(value));\n        } else {\n          result = result.mul(radixToPower);\n          result = result.add(fromNumber(value));\n        }\n      }\n      result.unsigned = unsigned;\n      return result;\n    }\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromString = fromString;\n\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromValue(val, unsigned) {\n      if (typeof val === \"number\") return fromNumber(val, unsigned);\n      if (typeof val === \"string\") return fromString(val, unsigned);\n      // Throws for non-objects, converts non-instanceof Long:\n      return fromBits(\n        val.low,\n        val.high,\n        typeof unsigned === \"boolean\" ? unsigned : val.unsigned,\n      );\n    }\n\n    /**\n     * Converts the specified value to a Long using the appropriate from* function for its type.\n     * @function\n     * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long}\n     */\n    Long.fromValue = fromValue;\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ZERO = fromInt(0);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     */\n    Long.ZERO = ZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UZERO = fromInt(0, true);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     */\n    Long.UZERO = UZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ONE = fromInt(1);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     */\n    Long.ONE = ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UONE = fromInt(1, true);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     */\n    Long.UONE = UONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var NEG_ONE = fromInt(-1);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     */\n    Long.NEG_ONE = NEG_ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     */\n    Long.MAX_VALUE = MAX_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     */\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     */\n    Long.MIN_VALUE = MIN_VALUE;\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toInt = function toInt() {\n      return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toNumber = function toNumber() {\n      if (this.unsigned)\n        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @this {!Long}\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     */\n    LongPrototype.toString = function toString(radix) {\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      if (this.isZero()) return \"0\";\n      if (this.isNegative()) {\n        // Unsigned Longs are never negative\n        if (this.eq(MIN_VALUE)) {\n          // We need to change the Long value before it can be negated, so we remove\n          // the bottom-most digit in this base and then recurse to do the rest.\n          var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n          return div.toString(radix) + rem1.toInt().toString(radix);\n        } else return \"-\" + this.neg().toString(radix);\n      }\n\n      // Do several (6) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n      var result = \"\";\n      while (true) {\n        var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n        rem = remDiv;\n        if (rem.isZero()) return digits + result;\n        else {\n          while (digits.length < 6) digits = \"0\" + digits;\n          result = \"\" + digits + result;\n        }\n      }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed high bits\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n      return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned high bits\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n      return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed low bits\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n      return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned low bits\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n      return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n      if (this.isNegative())\n        // Unsigned Longs are never negative\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n      var val = this.high != 0 ? this.high : this.low;\n      for (var bit = 31; bit > 0; bit--) if ((val & (1 << bit)) != 0) break;\n      return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long can be safely represented as a JavaScript number.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isSafeInteger = function isSafeInteger() {\n      // 2^53-1 is the maximum safe value\n      var top11Bits = this.high >> 21;\n      // [0, 2^53-1]\n      if (!top11Bits) return true;\n      // > 2^53-1\n      if (this.unsigned) return false;\n      // [-2^53, -1] except -2^53\n      return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isZero = function isZero() {\n      return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n     * @returns {boolean}\n     */\n    LongPrototype.eqz = LongPrototype.isZero;\n\n    /**\n     * Tests if this Long's value is negative.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isNegative = function isNegative() {\n      return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive or zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isPositive = function isPositive() {\n      return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isOdd = function isOdd() {\n      return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isEven = function isEven() {\n      return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.equals = function equals(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (\n        this.unsigned !== other.unsigned &&\n        this.high >>> 31 === 1 &&\n        other.high >>> 31 === 1\n      )\n        return false;\n      return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n      return !this.eq(/* validates */ other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ne = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n      return this.comp(/* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n      return this.comp(/* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.le = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n      return this.comp(/* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n      return this.comp(/* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.compare = function compare(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (this.eq(other)) return 0;\n      var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n      if (thisNeg && !otherNeg) return -1;\n      if (!thisNeg && otherNeg) return 1;\n      // At this point the sign bits are the same\n      if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n      // Both are positive if at least one is unsigned\n      return other.high >>> 0 > this.high >>> 0 ||\n        (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n        ? -1\n        : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @this {!Long}\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.negate = function negate() {\n      if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n      return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    LongPrototype.add = function add(addend) {\n      if (!isLong(addend)) addend = fromValue(addend);\n\n      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = addend.high >>> 16;\n      var b32 = addend.high & 0xffff;\n      var b16 = addend.low >>> 16;\n      var b00 = addend.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 + b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 + b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 + b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 + b48;\n      c48 &= 0xffff;\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n      if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n      return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n      if (this.isZero()) return this;\n      if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = wasm[\"mul\"](\n          this.low,\n          this.high,\n          multiplier.low,\n          multiplier.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n      if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n      if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n      if (this.isNegative()) {\n        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n        else return this.neg().mul(multiplier).neg();\n      } else if (multiplier.isNegative())\n        return this.mul(multiplier.neg()).neg();\n\n      // If both longs are small, use float multiplication\n      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n        return fromNumber(\n          this.toNumber() * multiplier.toNumber(),\n          this.unsigned,\n        );\n\n      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n      // We can skip products that would overflow.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = multiplier.high >>> 16;\n      var b32 = multiplier.high & 0xffff;\n      var b16 = multiplier.low >>> 16;\n      var b00 = multiplier.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 * b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 * b00;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c16 += a00 * b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 * b00;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a16 * b16;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a00 * b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n      c48 &= 0xffff;\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.divide = function divide(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n      if (divisor.isZero()) throw Error(\"division by zero\");\n\n      // use wasm support if present\n      if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (\n          !this.unsigned &&\n          this.high === -0x80000000 &&\n          divisor.low === -1 &&\n          divisor.high === -1\n        ) {\n          // be consistent with non-wasm code path\n          return this;\n        }\n        var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n          this.low,\n          this.high,\n          divisor.low,\n          divisor.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n      var approx, rem, res;\n      if (!this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (this.eq(MIN_VALUE)) {\n          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n            return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n          else if (divisor.eq(MIN_VALUE)) return ONE;\n          else {\n            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n            var halfThis = this.shr(1);\n            approx = halfThis.div(divisor).shl(1);\n            if (approx.eq(ZERO)) {\n              return divisor.isNegative() ? ONE : NEG_ONE;\n            } else {\n              rem = this.sub(divisor.mul(approx));\n              res = approx.add(rem.div(divisor));\n              return res;\n            }\n          }\n        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n        if (this.isNegative()) {\n          if (divisor.isNegative()) return this.neg().div(divisor.neg());\n          return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n        res = ZERO;\n      } else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned) divisor = divisor.toUnsigned();\n        if (divisor.gt(this)) return UZERO;\n        if (divisor.gt(this.shru(1)))\n          // 15 >>> 1 = 7 ; with divisor = 8 ; true\n          return UONE;\n        res = UZERO;\n      }\n\n      // Repeat the following until the remainder is less than other:  find a\n      // floating-point that approximates remainder / other *from below*, add this\n      // into the result, and subtract it from the remainder.  It is critical that\n      // the approximate value is less than or equal to the real value so that the\n      // remainder never becomes negative.\n      rem = this;\n      while (rem.gte(divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n          // that if it is too large, the product overflows and is negative.\n          approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\n          approx -= delta;\n          approxRes = fromNumber(approx, this.unsigned);\n          approxRem = approxRes.mul(divisor);\n        }\n\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (approxRes.isZero()) approxRes = ONE;\n        res = res.add(approxRes);\n        rem = rem.sub(approxRem);\n      }\n      return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n          this.low,\n          this.high,\n          divisor.low,\n          divisor.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.rem = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @this {!Long}\n     * @returns {!Long}\n     */\n    LongPrototype.not = function not() {\n      return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns count leading zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countLeadingZeros = function countLeadingZeros() {\n      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n    };\n\n    /**\n     * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.clz = LongPrototype.countLeadingZeros;\n\n    /**\n     * Returns count trailing zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countTrailingZeros = function countTrailingZeros() {\n      return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n    };\n\n    /**\n     * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.and = function and(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low & other.low,\n        this.high & other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.or = function or(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low | other.low,\n        this.high | other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.xor = function xor(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low ^ other.low,\n        this.high ^ other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      else if (numBits < 32)\n        return fromBits(\n          this.low << numBits,\n          (this.high << numBits) | (this.low >>> (32 - numBits)),\n          this.unsigned,\n        );\n      else return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      else if (numBits < 32)\n        return fromBits(\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\n          this.high >> numBits,\n          this.unsigned,\n        );\n      else\n        return fromBits(\n          this.high >> (numBits - 32),\n          this.high >= 0 ? 0 : -1,\n          this.unsigned,\n        );\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits < 32)\n        return fromBits(\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\n          this.high >>> numBits,\n          this.unsigned,\n        );\n      if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n      return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits rotated to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateLeft = function rotateLeft(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(\n          (this.low << numBits) | (this.high >>> b),\n          (this.high << numBits) | (this.low >>> b),\n          this.unsigned,\n        );\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(\n        (this.high << numBits) | (this.low >>> b),\n        (this.low << numBits) | (this.high >>> b),\n        this.unsigned,\n      );\n    };\n    /**\n     * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotl = LongPrototype.rotateLeft;\n\n    /**\n     * Returns this Long with bits rotated to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateRight = function rotateRight(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(\n          (this.high << b) | (this.low >>> numBits),\n          (this.low << b) | (this.high >>> numBits),\n          this.unsigned,\n        );\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(\n        (this.low << b) | (this.high >>> numBits),\n        (this.high << b) | (this.low >>> numBits),\n        this.unsigned,\n      );\n    };\n    /**\n     * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotr = LongPrototype.rotateRight;\n\n    /**\n     * Converts this Long to signed.\n     * @this {!Long}\n     * @returns {!Long} Signed long\n     */\n    LongPrototype.toSigned = function toSigned() {\n      if (!this.unsigned) return this;\n      return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @this {!Long}\n     * @returns {!Long} Unsigned long\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n      if (this.unsigned) return this;\n      return fromBits(this.low, this.high, true);\n    };\n\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @this {!Long}\n     * @returns {!Array.<number>} Byte representation\n     */\n    LongPrototype.toBytes = function toBytes(le) {\n      return le ? this.toBytesLE() : this.toBytesBE();\n    };\n\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    LongPrototype.toBytesLE = function toBytesLE() {\n      var hi = this.high,\n        lo = this.low;\n      return [\n        lo & 0xff,\n        (lo >>> 8) & 0xff,\n        (lo >>> 16) & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        (hi >>> 8) & 0xff,\n        (hi >>> 16) & 0xff,\n        hi >>> 24,\n      ];\n    };\n\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    LongPrototype.toBytesBE = function toBytesBE() {\n      var hi = this.high,\n        lo = this.low;\n      return [\n        hi >>> 24,\n        (hi >>> 16) & 0xff,\n        (hi >>> 8) & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        (lo >>> 16) & 0xff,\n        (lo >>> 8) & 0xff,\n        lo & 0xff,\n      ];\n    };\n\n    /**\n     * Creates a Long from its byte representation.\n     * @param {!Array.<number>} bytes Byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n      return le\n        ? Long.fromBytesLE(bytes, unsigned)\n        : Long.fromBytesBE(bytes, unsigned);\n    };\n\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param {!Array.<number>} bytes Little endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n      return new Long(\n        bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\n        bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\n        unsigned,\n      );\n    };\n\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param {!Array.<number>} bytes Big endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n      return new Long(\n        (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\n        (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\n        unsigned,\n      );\n    };\n\n    // Support conversion to/from BigInt where available\n    if (typeof BigInt === \"function\") {\n      /**\n       * Returns a Long representing the given big integer.\n       * @function\n       * @param {number} value The big integer value\n       * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n       * @returns {!Long} The corresponding Long value\n       */\n      Long.fromBigInt = function fromBigInt(value, unsigned) {\n        var lowBits = Number(BigInt.asIntN(32, value));\n        var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n        return fromBits(lowBits, highBits, unsigned);\n      };\n\n      // Override\n      Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n        if (typeof value === \"bigint\") return fromBigInt(value, unsigned);\n        return fromValue(value, unsigned);\n      };\n\n      /**\n       * Converts the Long to its big integer representation.\n       * @this {!Long}\n       * @returns {bigint}\n       */\n      LongPrototype.toBigInt = function toBigInt() {\n        var lowBigInt = BigInt(this.low >>> 0);\n        var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n        return (highBigInt << BigInt(32)) | lowBigInt;\n      };\n    }\n    var _default = (_exports.default = Long);\n  },\n);\n"],"mappings":"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G,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EACnE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EACjE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;IACd;IACA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EACnE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EACjE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;IACd;IACA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EACnE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EACjE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;IACd;IACA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EACnE,EAAE,EAAE,CAAC,EAAE,G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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}