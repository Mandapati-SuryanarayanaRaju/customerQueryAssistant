{"ast":null,"code":"'use strict';\n\nconst Command = require('./command.js');\nconst Query = require('./query.js');\nconst Packets = require('../packets/index.js');\nconst getBinaryParser = require('../parsers/binary_parser.js');\nconst getStaticBinaryParser = require('../parsers/static_binary_parser.js');\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function () {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n  buildParserFromFields(fields, connection) {\n    if (this.options.disableEval) {\n      return getStaticBinaryParser(fields, this.options, connection.config);\n    }\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    this._setTimeout();\n    const executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone);\n    //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n    return Execute.prototype.resultsetHeader;\n  }\n  readField(packet, connection) {\n    let fields;\n    // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n    const field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this._receivedFieldsCount++;\n    this._fields[this._resultIndex].push(field);\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n    return Execute.prototype.readField;\n  }\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    this._rowParser = new (this.buildParserFromFields(this._fields[this._resultIndex], connection))();\n    return Execute.prototype.row;\n  }\n}\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\nmodule.exports = Execute;","map":{"version":3,"names":["Command","require","Query","Packets","getBinaryParser","getStaticBinaryParser","Execute","constructor","options","callback","statement","sql","values","onResult","parameters","insertId","timeout","queryTimeout","_rows","_fields","_result","_fieldCount","_rowParser","_executeOptions","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","buildParserFromFields","fields","connection","disableEval","config","start","packet","Object","assign","_setTimeout","executePacket","id","charsetNumber","timezone","writePacket","toPacket","error","prototype","resultsetHeader","readField","field","ColumnDefinition","clientEncoding","_receivedFieldsCount","push","emit","fieldsEOF","isEOF","protocolError","row","done","doneInsert","_findOrCreateReadStream","_streamLocalInfile","_handleTimeoutError","stream","module","exports"],"sources":["D:/Customer Query Assistant/Customer Query Assistant/client/node_modules/mysql2/lib/commands/execute.js"],"sourcesContent":["'use strict';\n\nconst Command = require('./command.js');\nconst Query = require('./query.js');\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\nconst getStaticBinaryParser = require('../parsers/static_binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function () {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    if (this.options.disableEval) {\n      return getStaticBinaryParser(fields, this.options, connection.config);\n    }\n\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    this._setTimeout();\n    const executePacket = new Packets.Execute(\n      this.statement.id,\n      this.parameters,\n      connection.config.charsetNumber,\n      connection.config.timezone\n    );\n    //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields;\n    // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n    const field = new Packets.ColumnDefinition(\n      packet,\n      connection.clientEncoding\n    );\n    this._receivedFieldsCount++;\n    this._fields[this._resultIndex].push(field);\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    this._rowParser = new (this.buildParserFromFields(\n      this._fields[this._resultIndex],\n      connection\n    ))();\n    return Execute.prototype.row;\n  }\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream =\n  Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\n\nmodule.exports = Execute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}